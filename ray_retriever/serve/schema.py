from typing import List, Dict, Optional, Sequence
from pydantic import BaseModel
from dataclasses import dataclass

class TextNode(BaseModel):
    """A chunk of text stored in a vector database.

    Args:
        id (str): Unique identifier
        index_name (str): Database index name
        metadata (Dict): Record metadata
        text (str): The text
        embedding (Optional[List[float]]): Embedding vector
    """
    id: str
    index_name:str
    metadata: Dict
    text: str
    embedding: Optional[List[float]]

class NodeWithScore(BaseModel):
    """A TextNode with an optional score.

    Args:
        node (TextNode): The TextNode
        score (Optional[float]): Optional score
    """
    node: TextNode
    score: Optional[float] = None

class TokenUsage(BaseModel):
    """Number of tokens processed when invoking 
    a language model.

    Args:
        completion_tokens (int): Number of generated tokens
        prompt_tokens (int): Number of prompt tokens
        total_tokens (int): Total number of tokens
    """
    completion_tokens: int
    prompt_tokens: int
    total_tokens: int

class RetrieverResponse(BaseModel):
    """Response generated by the ResponseGenerator task.

    Args:
        response (str): The output from the language model
        finish_reason (str): The language model finish reason
        model (str): Model ID
        usage (TokenUsage): Token usage
        context_node_info (List[Dict]): Context information used to generate the response
    """
    response: str
    finish_reason: str
    model: str
    usage: TokenUsage
    context_node_info: List[Dict]

class DocumentEmbedding(BaseModel):
    """Document embedding vector

    Args:
        embedding (List[float]): Embedding vector
    """
    embedding: List[float]

class VectorStoreQueryResult(BaseModel):
    """Result of a similarity query to a vector store.

    Args:
        nodes (Sequence[TextNode]): Retrieved text chunks
        similarities (List[float]): Similarity scores
    """
    nodes: Sequence[TextNode]
    similarities: List[float]
